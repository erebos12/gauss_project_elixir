defmodule GAUSS do
  @moduledoc """
  Documentation for GAUSS.
  """

  @doc """
  Problem 1: Multiples of 3 and 5
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000.

  ## Examples

      iex> GAUSS.multiples_of_3_and_5(1000)
      233168
      iex> GAUSS.multiples_of_3_and_5(10)
      23

  """
  def multiples_of_3_and_5(below) do
      Enum.filter(0..below-1, fn(x) -> rem(x, 3) == 0 or rem(x, 5) == 0 end) |> Enum.sum
  end

  @doc """
  Problem 2: Even Fibonacci numbers
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:

      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.

  ## Examples

      iex> GAUSS.fib_even_sum(4)
      2
      iex> GAUSS.fib_even_sum(3)
      0
      iex> GAUSS.fib_even_sum(10)
      44
  """
  def fib_even_sum(max) do
    Enum.map(0..max-1, fn(x) -> fib(x) end)
    |> Enum.filter(fn(x) -> x < 4000000 end)
    |> Enum.filter(fn(x) -> rem(x,2) == 0 end)
    |> Enum.sum
  end

  def is_prime(1), do: false
  def is_prime(2), do: true
  def is_prime(a) when is_integer(a) do
      Enum.take_while(2..a-1, fn(x) -> rem(a, x) == 0 end) |> Enum.count == 0
  end

  def find_smallest_prime_factor_slow(a) when is_integer(a) do
    Enum.filter(1..a, fn x  -> rem(a,x) == 0 and is_prime(x) end) |> Enum.at(0)
  end

  def find_smallest_prime_factor(1), do: nil
  def find_smallest_prime_factor(a) do
    Enum.reduce_while(1..a, 0, fn x, acc
      -> if is_prime(x) and rem(a,x) == 0, do: {:halt, x}, else: {:cont, acc + x} end)
  end

  def prime_factorization(1, l), do: l
  def prime_factorization(a, l) do
      prime_factor = find_smallest_prime_factor(a)
      l = [prime_factor | l]
      div(a, prime_factor) |> prime_factorization(l)
  end

  def max_prime_factor(a) do
     prime_factorization(a, []) |> Enum.max
  end

  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n), do: fib(n-1) + fib(n-2)

end
